// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/availability/check-field": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Availability"
                ],
                "summary": "Checks if the email is not already registered on the platform.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value",
                        "schema": {
                            "$ref": "#/definitions/contracts.GenericResponse"
                        }
                    },
                    "409": {
                        "description": "Invalid Email",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "It will be sent an email containing an code that will be used to provide a new password.",
                "parameters": [
                    {
                        "description": "ForgotPassword Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response",
                        "schema": {
                            "$ref": "#/definitions/contracts.GenericResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication Failed",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "403": {
                        "description": "Don't have access to this resource",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Attach a profile to the ` + "`" + `created account` + "`" + `.",
                "parameters": [
                    {
                        "description": "AttachProfile Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.AttachProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attached Profile Id",
                        "schema": {
                            "$ref": "#/definitions/contracts.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetailsExtendend"
                        }
                    },
                    "404": {
                        "description": "Grant Type not found",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/profiles/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Validate the provided ` + "`" + `token` + "`" + ` and returns success or failed weather the token was signed by the ` + "`" + `public key` + "`" + `.",
                "responses": {
                    "200": {
                        "description": "Token Payload",
                        "schema": {
                            "$ref": "#/definitions/contracts.AccountResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication Failed",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "403": {
                        "description": "Don't have access to this resource",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "After reviving an email with the code, this endpoint will allow the user to reset his password.",
                "parameters": [
                    {
                        "description": "ResetPassword Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response",
                        "schema": {
                            "$ref": "#/definitions/contracts.GenericResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication Failed",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "403": {
                        "description": "Don't have access to this resource",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/sign-up": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register an access key to obtain a ` + "`" + `profileId` + "`" + `, which allows you to create a profile on the platform.",
                "parameters": [
                    {
                        "description": "Sign Up Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account Created",
                        "schema": {
                            "$ref": "#/definitions/contracts.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetailsExtendend"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "409": {
                        "description": "Invalid Password or Email already used",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "OAuth2 endpoints for authorization",
                "parameters": [
                    {
                        "description": "LogIn Payload",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contracts.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get Access Credentials",
                        "schema": {
                            "$ref": "#/definitions/contracts.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetailsExtendend"
                        }
                    },
                    "401": {
                        "description": "Authentication Failed",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    },
                    "500": {
                        "description": "Server failed to provide an valid response",
                        "schema": {
                            "$ref": "#/definitions/shared.ProblemDetails"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "contracts.AccountResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "profile_id": {
                    "type": "string"
                },
                "profile_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "contracts.AttachProfileRequest": {
            "type": "object",
            "properties": {
                "grant_type": {
                    "type": "integer"
                }
            }
        },
        "contracts.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_exp": {
                    "type": "integer"
                },
                "details": {
                    "$ref": "#/definitions/contracts.AccountResponse"
                },
                "refresh_token": {
                    "type": "string"
                },
                "refresh_token_exp": {
                    "type": "integer"
                }
            }
        },
        "contracts.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "contracts.GenericResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "contracts.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "grant_type": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "contracts.ProfileResponse": {
            "type": "object",
            "properties": {
                "profile_id": {
                    "type": "string"
                }
            }
        },
        "contracts.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "contracts.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "role": {
                    "type": "integer"
                }
            }
        },
        "shared.ProblemDetails": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "extensions": {
                    "type": "object",
                    "additionalProperties": true
                },
                "instance": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "shared.ProblemDetailsExtendend": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extensions": {
                    "type": "object",
                    "additionalProperties": true
                },
                "instance": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Enter the token with the ` + "`" + `Bearer: ` + "`" + ` prefix, e.g. \"Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ5MjRhNmEx...\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
